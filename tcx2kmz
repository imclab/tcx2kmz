#!/usr/bin/python

from optparse import OptionParser
import sys

import kml
from tcx import TCX


def main(argv):
    parser = OptionParser()
    parser.add_option('-d', '--date', metavar='DATE')
    parser.add_option('-o', '--output', metavar='FILENAME')
    options, args = parser.parse_args(argv[1:])
    document = kml.Document()
    schema = kml.Schema()
    schema.add(kml.gxSimpleArrayField(displayName='Heart Rate').add_attrs(name='heart_rate', type='int'))
    document.add(schema)
    for arg in args:
        tcx = TCX.parse(open(arg))
        for activity in tcx.activities:
            if options.date and not activity.id.startswith(options.date):
                continue
            placemark = kml.Placemark(name='%s %s' % (activity.sport, activity.id))
            style = kml.Style()
            style.add(kml.LineStyle(color='ff0000ff', width=3))
            style.add(kml.IconStyle(kml.Icon(href='http://earth.google.com/images/kml-icons/track-directional/track-0.png')))
            placemark.add(style)
            multi_track = kml.gxMultiTrack()
            for lap in activity.laps:
                track = kml.gxTrack(altitudeMode='clampToGround')
                heart_rate = kml.gxSimpleArrayData().add_attrs(name='heart_rate')
                for trackpoint in lap.track:
                    if trackpoint.latitude_degrees and trackpoint.longitude_degrees:
                        track.add(kml.when(trackpoint.time))
                        track.add(kml.gxcoord((trackpoint.longitude_degrees, trackpoint.latitude_degrees, trackpoint.altitude_meters)))
                        heart_rate.add(kml.gxvalue(trackpoint.heart_rate_bpm))
                track.add(kml.ExtendedData(kml.SchemaData(heart_rate).add_attrs(schemaUrl='#' + schema.id())))
                multi_track.add(track)
            placemark.add(multi_track)
            document.add(placemark)
    if options.output:
        output = open(options.output, 'w')
    else:
        output = sys.stdout
    kml.kml('2.2', ('gx',), document).pretty_write(output)


if __name__ == '__main__':
    main(sys.argv)
